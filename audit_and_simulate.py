#!/usr/bin/env python3
"""
Audyt Kodu i Symulacja BFA Audit App
====================================
"""

import sys
import time
from backend.calculators.financial_impact import FinancialMetricsCalculator
from backend.calculators.scenario_planning import ScenarioPlanningAnalyzer
from backend.calculators.tdabc import TDABCCalculator
from backend.calculators.benchmarking import BenchmarkingMaturityAssessment

print("=" * 70)
print("  AUDYT KODU I SYMULACJA - BFA AUDIT APP")
print("=" * 70)

# Test 1: Financial Calculator
print("\n[1/5] Test: Financial Impact Calculator...")
try:
    calc = FinancialMetricsCalculator()
    result = calc.calculate_comprehensive_metrics(
        initial_investment=500000,
        annual_benefits=200000,
        annual_costs=50000,
        project_years=5,
        discount_rate=0.10,
        invested_capital=500000,
        tax_rate=0.21
    )
    print(f"  ‚úÖ NPV: ${result['npv']:,.2f}")
    print(f"  ‚úÖ ROI: {result['roi_pct']:.2f}%")
    print(f"  ‚úÖ IRR: {result['irr_pct']:.2f}%")
    print(f"  ‚úÖ Payback: {result['payback_period_years']:.2f} lat")
    print(f"  ‚úÖ ROIC: {result['roic_pct']:.2f}%")
    print("  ‚úÖ PASS - Kalkulator finansowy dzia≈Ça poprawnie")
except Exception as e:
    print(f"  ‚ùå FAIL - B≈ÇƒÖd: {e}")
    sys.exit(1)

# Test 2: Scenario Planning
print("\n[2/5] Test: Scenario Planning...")
try:
    analyzer = ScenarioPlanningAnalyzer()
    scenarios = analyzer.compare_scenarios(
        base_capex=500000,
        base_opex=50000,
        base_benefits=200000,
        project_years=5,
        discount_rate=0.10
    )
    
    print("\n  Scenariusze:")
    for scenario_name, scenario_data in scenarios['scenarios'].items():
        metrics = scenario_data['financial_metrics']
        print(f"    {scenario_data['name']}:")
        print(f"      NPV: ${metrics['npv']:,.2f}")
        print(f"      ROI: {metrics['roi_pct']:.2f}%")
    
    recommendation = scenarios['comparison']['recommendation']
    print(f"\n  ‚úÖ Rekomendacja: {recommendation['recommended_scenario']}")
    print("  ‚úÖ PASS - Planowanie scenariuszy dzia≈Ça poprawnie")
except Exception as e:
    print(f"  ‚ùå FAIL - B≈ÇƒÖd: {e}")
    sys.exit(1)

# Test 3: TDABC
print("\n[3/5] Test: TDABC Calculator...")
try:
    tdabc = TDABCCalculator()
    result = tdabc.calculate_tdabc_full_analysis(
        total_cost=560000,
        theoretical_capacity_minutes=876000,
        resource_type='people',
        activities=[
            {'name': 'Process Orders', 'unit_time': 8, 'volume': 1000},
            {'name': 'Handle Inquiries', 'unit_time': 5, 'volume': 2000},
        ]
    )
    
    print(f"  ‚úÖ Capacity Cost Rate: ${result['summary']['capacity_cost_rate']:.4f}/min")
    print(f"  ‚úÖ Utilization: {result['utilization']['utilization_rate']:.1f}%")
    print(f"  ‚úÖ Status: {result['utilization']['status']}")
    print("  ‚úÖ PASS - TDABC dzia≈Ça poprawnie")
except Exception as e:
    print(f"  ‚ùå FAIL - B≈ÇƒÖd: {e}")
    sys.exit(1)

# Test 4: Benchmarking
print("\n[4/5] Test: Industry Benchmarking...")
try:
    benchmarking = BenchmarkingMaturityAssessment()
    result = benchmarking.compare_to_industry(
        industry='manufacturing',
        calculated_roi=25.5,
        calculated_payback_months=24,
        capex=500000,
        opex=75000
    )
    
    print(f"  ‚úÖ Industry: {result['industry']}")
    print(f"  ‚úÖ ROI Performance: {result['roi_comparison']['performance']}")
    print(f"  ‚úÖ Payback Performance: {result['payback_comparison']['performance']}")
    print("  ‚úÖ PASS - Benchmarking dzia≈Ça poprawnie")
except Exception as e:
    print(f"  ‚ùå FAIL - B≈ÇƒÖd: {e}")
    sys.exit(1)

# Test 5: Performance Test
print("\n[5/5] Test: Performance...")
try:
    start_time = time.time()
    calc = FinancialMetricsCalculator()
    
    # Run 100 calculations
    for i in range(100):
        result = calc.calculate_comprehensive_metrics(
            initial_investment=500000,
            annual_benefits=200000,
            annual_costs=50000,
            project_years=5,
            discount_rate=0.10,
            invested_capital=500000,
            tax_rate=0.21
        )
    
    end_time = time.time()
    elapsed = end_time - start_time
    avg_time = elapsed / 100
    
    print(f"  ‚úÖ 100 kalkulacji w: {elapsed:.3f}s")
    print(f"  ‚úÖ ≈öredni czas: {avg_time*1000:.2f}ms")
    
    if avg_time < 0.1:  # Less than 100ms per calculation
        print("  ‚úÖ PASS - Wydajno≈õƒá doskona≈Ça")
    else:
        print("  ‚ö†Ô∏è  WARN - Wydajno≈õƒá do poprawy")
except Exception as e:
    print(f"  ‚ùå FAIL - B≈ÇƒÖd: {e}")
    sys.exit(1)

# Summary
print("\n" + "=" * 70)
print("  WYNIKI AUDYTU")
print("=" * 70)
print("\n‚úÖ Wszystkie testy przesz≈Çy pomy≈õlnie!")
print("\nStatus modu≈Ç√≥w:")
print("  ‚úÖ Financial Impact Calculator - DZIA≈ÅA")
print("  ‚úÖ Scenario Planning - DZIA≈ÅA")
print("  ‚úÖ TDABC Calculator - DZIA≈ÅA")
print("  ‚úÖ Benchmarking - DZIA≈ÅA")
print("  ‚úÖ Performance - DOSKONA≈ÅA")

print("\n" + "=" * 70)
print("  IDENTYFIKACJA MO≈ªLIWYCH ULEPSZE≈É")
print("=" * 70)

improvements = [
    {
        'area': 'Performance',
        'current': 'Synchroniczne obliczenia',
        'improvement': 'Dodaƒá async processing dla du≈ºych zbior√≥w danych',
        'priority': '≈öREDNI',
        'benefit': 'Szybsze przetwarzanie przy wielu r√≥wnoczesnych ≈ºƒÖdaniach'
    },
    {
        'area': 'Caching',
        'current': 'Brak cache',
        'improvement': 'Dodaƒá Redis cache dla benchmark√≥w i czƒôstych kalkulacji',
        'priority': '≈öREDNI',
        'benefit': 'Redukcja czasu odpowiedzi o 70-90%'
    },
    {
        'area': 'Validation',
        'current': 'Podstawowa walidacja Pydantic',
        'improvement': 'Dodaƒá business logic validation (np. ROI > 0)',
        'priority': 'NISKI',
        'benefit': 'Lepsza jako≈õƒá danych wej≈õciowych'
    },
    {
        'area': 'Error Handling',
        'current': 'Og√≥lne b≈Çƒôdy',
        'improvement': 'Dodaƒá custom exception classes z szczeg√≥≈Çowymi komunikatami',
        'priority': '≈öREDNI',
        'benefit': '≈Åatwiejszy debugging i lepsza UX'
    },
    {
        'area': 'Logging',
        'current': 'Brak structured logging',
        'improvement': 'Dodaƒá structured logging (JSON) z trace IDs',
        'priority': 'WYSOKI',
        'benefit': '≈Åatwiejsze monitorowanie produkcji'
    },
    {
        'area': 'API Rate Limiting',
        'current': 'Brak limit√≥w',
        'improvement': 'Dodaƒá rate limiting (slowapi)',
        'priority': 'WYSOKI',
        'benefit': 'Ochrona przed abuse'
    },
    {
        'area': 'Database Connection Pool',
        'current': 'Nie zaimplementowano',
        'improvement': 'Dodaƒá connection pooling dla PostgreSQL',
        'priority': 'WYSOKI',
        'benefit': 'Lepsza wydajno≈õƒá bazy danych'
    },
    {
        'area': 'Input Sanitization',
        'current': 'Podstawowa',
        'improvement': 'Dodaƒá dodatkowƒÖ walidacjƒô zakres√≥w warto≈õci',
        'priority': '≈öREDNI',
        'benefit': 'Zapobieganie nieprawid≈Çowym wynikom'
    }
]

print("\nZidentyfikowane obszary do optymalizacji:\n")
for i, imp in enumerate(improvements, 1):
    print(f"{i}. {imp['area']} [{imp['priority']}]")
    print(f"   Obecny stan: {imp['current']}")
    print(f"   Ulepszenie: {imp['improvement']}")
    print(f"   Korzy≈õƒá: {imp['benefit']}\n")

print("=" * 70)
print("  REKOMENDACJE")
print("=" * 70)
print("\nüî• Priorytet WYSOKI (do wdro≈ºenia natychmiast):")
print("  1. Structured logging z trace IDs")
print("  2. Rate limiting dla API")
print("  3. Database connection pooling")

print("\n‚ö° Priorytet ≈öREDNI (do wdro≈ºenia w nastƒôpnej iteracji):")
print("  1. Redis cache dla benchmark√≥w")
print("  2. Custom exception classes")
print("  3. Rozszerzona walidacja zakres√≥w")
print("  4. Async processing dla du≈ºych danych")

print("\nüí° Priorytet NISKI (nice-to-have):")
print("  1. Business logic validation")

print("\n" + "=" * 70)
print("‚úÖ AUDYT I SYMULACJA ZAKO≈ÉCZONE POMY≈öLNIE")
print("=" * 70)
